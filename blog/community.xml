<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Blogging with Hindsight</title>
 <link href="http://hindsighttesting.com/blog/community.xml" rel="self"/>
 <link href="http://hindsighttesting.com/"/>
 <updated>2013-02-16T17:49:58+00:00</updated>
 <id>http://hindsighttesting.com/blog</id>
 <author>
   <name>Hindsight Software Ltd</name>
   <email>mail@hindsighttesting.com</email>
 </author>

 
 <entry>
   <title>Cross browser testing user interface rendering</title>
   <link href="http://hindsighttesting.comblog/2013/01/21/Cross-browser-testing-user-interface-rendering/"/>
   <updated>2013-01-21T00:00:00+00:00</updated>
   <id>http://recursive-design.comblog/2013/01/21/Cross-browser-testing-user-interface-rendering</id>
   <content type="xhtml">&lt;p&gt;When it comes to front-end development with Behave for JIRA, I tend to favour Chrome as my web browser of choice but that does not allow me to escape from working with Internet Explorer. At Hindsight, we recognise Behave has to work across any number of browser and OS combinations, with the main challenges lying with Internet Explorer. Luckily IE6 is no longer a problem as Microsoft now considers it obsolete, according to &lt;a href=&quot;http://www.ie6countdown.com/&quot;&gt;IE6 countdown&lt;/a&gt;, its use is down to 0.9% in the UK and 0.4% in the US. That leaves us with Internet Explorer 7 and upwards to consider.&lt;/p&gt;

&lt;h2&gt;Progressive Enhancement v. Graceful Degradation&lt;/h2&gt;

&lt;p&gt;The main issue with Internet Explorer is that each version of Explorer renders Behave's User Interface differently. This is due to Microsoft's inconsistent and idiosyncratic implementation of the rendering engine. In an ideal world one set of standards-based CSS style sheets would be cover all browser options, however this is still some years off. Hindsight's goal is for Behave to support IE 7 (and upwards) but also to provide a rich experience to users of the latest browsers. To ensure compatibility we a choice of 2 techniques - Progressive Enhancement or Graceful Degradation.&lt;/p&gt;

&lt;p&gt;Both techniques work in a layered fashion that allows all users, regardless of Browser variation, to access the basic content and functionality of the Behave for JIRA plugin, while providing the full version of the Behave User Interface to those with more advanced browser software. The practical difference in development techniques is that in Progressive Enhancement I would build from the lowest layer (IE7) upwards, gradually enhancing the User Interface functionality for each individual browser, whereas with Graceful Degradation, I create the full version of the UI first for the modern browsers and then gradually reduce the functionality to suit the needs of those using older browsers.&lt;/p&gt;

&lt;p&gt;Graceful Degradation is the natural choice for me, because I can work locally, in small iterations, on a modern browser. I can play with all the HTML5 features and get feedback as soon as the CSS or JavaScript file in question is saved (thanks to &lt;a href=&quot;http://livereload.com/&quot;&gt;livereload&lt;/a&gt;), leaving browser compatibility until the end of the development cycle. Working &quot;progressively&quot; in the other direction would mean I'd need older (and non-native, given my workstation runs Ubuntu) browsers configured and running on my box from the outset. I would be driven in my development by the limitations of the older browsers, rather than being free to explore the many options new browsers provide.&lt;/p&gt;

&lt;h2&gt;What's the problem?&lt;/h2&gt;

&lt;p&gt;To perform the Graceful Degradation effectively I need access to a wide range of Browser versions and different operating systems. I have to be confident that my 'test' environment is stable enough perform the graceful degradation, as it often requires disabling features and  I only want to do this as a last resort solution.&lt;/p&gt;

&lt;p&gt;Traditionally I would have to set-up a test environment in an isolated virtual machine for each browser and operating system combination. Launching and then maintaining all these environments is a time consuming, hardware intensive and downright inconvenient task - as much as I enjoy a bit of hands on sysadmin work, for me it's a true context shift away from the flow of development.&lt;/p&gt;

&lt;p&gt;What do I want? I want a solution that allows me to...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Access to a wide range of different browsers and operating systems &quot;mid-flow&quot;&lt;/li&gt;
&lt;li&gt;Do the majority of my development work in Chrome&lt;/li&gt;
&lt;li&gt;Keep all my work local&lt;/li&gt;
&lt;li&gt;Get quick and useful feedback about changes I've made many different browsers&lt;/li&gt;
&lt;li&gt;Know what I see is representative of what a user of that operating system and browser would see&lt;/li&gt;
&lt;li&gt;Reduce the administration and maintenance of test environments&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;What's the Solution?&lt;/h2&gt;

&lt;p&gt;SauceLabs produce a tool called Scout, which provides 96+ different Operating System and Browser combinations. I enter the target URL into Scout, select an operating system and browser, and off I go. As I navigate the website, Scout captures live video, screenshots and makes logs, all of which are available for debrief after I end the test session. I usually keep several tabs open in Scout, one for each of the different browsers I'm testing against, and this  makes corrections simple to implement. But Scout has a limitation - it can only be used to test websites that are publicly exposed. This is a problem because it would require us to host the files on a local web server and expose our network, or to push the files to a remote web server, exposing our code and stopping us from being able to utilize livereload.&lt;/p&gt;

&lt;p&gt;Sauce Connect enables us to use Scout with locally hosted files and bypass the above mentioned issues. Sauce Connect does this by establishing an encrypted SSH tunnel and tunnelling securely between my workstation (in Hindsight  office, behind the Hindsight firewall), and the dedicated, virtual machine in the SauceLabs cloud in California. I simply run a script on my computer to establish this connection, and then I can access my locally running web server through the web browser running in the Sauce Labs cloud. Because Sauce Connect uses an SSH tunnel I don't need to get a system administrator to change any network firewall setting unlike a VPN.&lt;/p&gt;

&lt;p&gt;How does Sauce Connect effect my workflow? No one bit, once I run the script to open the Sauce Connect tunnel, I drop into my normal cycle of amending CSS files locally and refreshing my web browser to view the result, except the web browser in question is in the Sauce Labs cloud!&lt;/p&gt;

&lt;p&gt;You can find out more about Scout and Sauce connect at the &lt;a href=&quot;http://saucelabs.com/home&quot;&gt;SauceLabs Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Their free accounts come with 100 Windows, Linux &amp;amp; Android code minutes, 40 Mac &amp;amp; iOS code minutes, plus 30 minutes of manual testing per month. Remember to use the promo code &quot;hindsight&quot; when you sign up for a free or paid plan.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Slides from jDays - Continuous Deployment Pipeline with Maven</title>
   <link href="http://hindsighttesting.comblog/2012/12/10/jdays-goteborg-continuous-deployment-pipeline-with-maven/"/>
   <updated>2012-12-10T00:00:00+00:00</updated>
   <id>http://recursive-design.comblog/2012/12/10/jdays-goteborg-continuous-deployment-pipeline-with-maven</id>
   <content type="xhtml">&lt;p&gt;Last week I attended the &lt;a href=&quot;http://www.jdays.se/&quot;&gt;jDays Conference&lt;/a&gt; for Java Professionals and talked about building a &quot;Continuous Deployment Pipeline in Maven&quot;&lt;/p&gt;

&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/15569541&quot; width=&quot;597&quot; height=&quot;486&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&quot; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt;


&lt;p&gt;&lt;/p&gt;

&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;http://www.slideshare.net/alan_parkinson/continuous-deployment-pipeline-with-maven&quot; title=&quot;Continuous Deployment Pipeline with maven&quot; target=&quot;_blank&quot;&gt;Continuous Deployment Pipeline with maven&lt;/a&gt; &lt;/strong&gt; by &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/alan_parkinson&quot; target=&quot;_blank&quot;&gt;Alan Parkinson&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;



</content>
 </entry>
 
 <entry>
   <title>A Slice of Pi with your Information Radiator</title>
   <link href="http://hindsighttesting.comblog/2012/06/01/raspberry-pi-jira-information-raditor/"/>
   <updated>2012-06-01T00:00:00+01:00</updated>
   <id>http://recursive-design.comblog/2012/06/01/raspberry-pi-jira-information-raditor</id>
   <content type="xhtml">&lt;p&gt;Most of you would of heard of the Raspberry Pi - a low powered credit card sized computer released in the last few months. After a wait I managed to get my hands on one of these nifty devices and have put one of my ideas into action: a power efficient information radiator.&lt;/p&gt;

&lt;p&gt;Information radiators are very useful visual tools that allow anyone at a glance to see the state of the project and receive feedback from important systems. Typically an old or spare PC is used to run a web browser rendering information to a large screen or TV displayed in the team's work area. JIRA has a handy Wallboard plugin that can turn any dashboard into a format to appear on a Information Radiator.&lt;/p&gt;

&lt;p&gt;With PCs using between 60-300 watts of power they are not the most power efficient compared to the Raspberry's 2 watts. The Raspberry Pi also has other benefits.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cost: Old machines while still capable often need new components due to age and many years of use. The cost of a Raspberry Pi is approx $25-35 per unit depending on the model. This price is often the same or cheaper than replacing a Power supply or Hard disk of a old computer.&lt;/li&gt;
&lt;li&gt;GPIO: The Raspberry has a set of pins which can be used to interface it to electronics. This could be used to drive lamps or LEDs to draw team members attention to the information radiator when important events occur, e.g. Build Fail&lt;/li&gt;
&lt;li&gt;Small and Quiet: The circuit board of the Raspberry could be mounted on the back of the Visual Display whereas a PC is rather large and heavy.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Enough of the why, does the Raspberry Pi work?&lt;/h2&gt;

&lt;p&gt;Spoiler alert! It does work but not out of the box.&lt;/p&gt;

&lt;p&gt;My first attempt at the information radiator was using the stock Debian Squeeze distribution provided by the Raspberry Pi Foundation. This distribution comes with the lightweight Webkit (the same engine as Chrome and Safari) based browser, Midori. The version of Midori happens to be 0.2.4-3 and couldn't handle the Javascript with JIRA 5  (I haven't tested other JIRA versions).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gallery/RaspberryPiAssembled.jpg&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;Hang on, Firefox and Chrome are both available on Linux.&lt;/h2&gt;

&lt;p&gt;The Raspberry Pi has a ARM 11 based processor so we are limited on choice of Linux distributions and the packages which have been compiled for &quot;armtel&quot;.&lt;/p&gt;

&lt;p&gt;There is a community project &lt;a href=&quot;http://www.raspbian.org/&quot;&gt;raspbian&lt;/a&gt; currently porting the more up to date Debian Whezzy distribution to the ARM processor used in the Raspberry. This saved the day because it provided a cross compiled version of Midori 0.4.3 with good javascript support.&lt;/p&gt;

&lt;p&gt;Raspbian is in the early stages of development and no official images have been provided, but there are Community produce images available. I used the image produced by &lt;a href=&quot;http://www.raspbian.org/HexxehImages&quot;&gt;Hexxeh&lt;/a&gt;, version r3. Once I had written this image to my SD card, I booted the Raspberry Pi and logged in using the &quot;root&quot; user and &quot;hexxeh&quot; password.&lt;/p&gt;

&lt;p&gt;The image is rather simple and we need to add a few extra packages and configurations to make it useful for our purposes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ apt-get install ntp fake-hwclock&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ dpkg-reconfigure tzdata&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ apt-get install locales&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ dpkg-reconfigure locales&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ apt-get install console-data&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ dpkg-reconfigure console-data&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ apt-get install lxde-icon-theme&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ apt-get install midori&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As JIRA sends a large amount of files and data over HTTP, this can flood the buffers on a swapless system like the Raspberry and lead it to run out of memory. To avoid this a little kernel tweaking needs to take place. Edit &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; (Hint to Linux noobs: &lt;code&gt;nano /etc/sysctl.conf&lt;/code&gt;) and add &lt;code&gt;vm.min_free_kbytes = 8192&lt;/code&gt; as the last line. Reboot the Raspberry (&lt;code&gt;reboot&lt;/code&gt;) and then you are ready to start the GUI with &lt;code&gt;startx&lt;/code&gt; and open the Midori web browser from the Desktop menu and open JIRA with the Wallboard plugin running.&lt;/p&gt;

&lt;h2&gt;Performance&lt;/h2&gt;

&lt;p&gt;My wallboard configuration in JIRA had 2 dashboards setup as a slideshow with slide left animation. My dashboards contained the following Gadgets&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Greenhooper Agile Gadget (Used as a Sprint Burndown graph)&lt;/li&gt;
&lt;li&gt;Greenhooper Rapid Board (Displays our Current sprint task in swimlanes)&lt;/li&gt;
&lt;li&gt;Activity stream&lt;/li&gt;
&lt;li&gt;Several JQL Filter Results&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There is a initial wait of 30 seconds to load the wallboard slide show and the slide animation between dashboards was a little jerky. But this is be to expected on a low power device without much optimization in the compilation of the web browser and javascript engine. Both these performance issues represent no usability problems as a information radiator due to the fact its not an interactive system. These issue are likely to be reduced with optimisation of the software packages (The current focus is to get them to run) and most importantly improvements in the use of Raspberry's dedicated GPU.&lt;/p&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I have tested some TV's with the Raspberry PI and the Raspian distribution and some of them have had issues with the xserver. I haven't had enough time to investigate these issues in detail but a manual configuration of the xserver should be the solution.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Security testing with Selenium and the Zed Attack Proxy (ZAP)</title>
   <link href="http://hindsighttesting.comblog/2012/05/18/automated-security-testing-selenium-zap/"/>
   <updated>2012-05-18T00:00:00+01:00</updated>
   <id>http://recursive-design.comblog/2012/05/18/automated-security-testing-selenium-zap</id>
   <content type="xhtml">&lt;p&gt;A few weeks ago I had the pleasure of speaking at the 2012 Selenium Conf in London. My presentation was on &quot;Automated Security Testing&quot; using Selenium and the Zed Attack Proxy. All the SeConf presentations have been recorded and I thought I would share my talk with you now it has been published.&lt;/p&gt;

&lt;object style=&quot;height: 460px; width: 760px&quot;&gt;&lt;param name=&quot;wmode&quot; value=&quot;transparent&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/aVFZFi_6B9g?version=3&amp;feature=player_detailpage&quot;&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;&gt;&lt;embed src=&quot;http://www.youtube.com/v/aVFZFi_6B9g?version=3&amp;feature=player_detailpage&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; allowScriptAccess=&quot;always&quot; width=&quot;760&quot; height=&quot;460&quot;&gt;&lt;/object&gt;


&lt;h3&gt;Recreating my demo&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Install Chrome if not already installed&lt;/li&gt;
&lt;li&gt;Start Jenkins on port 80. I used a fresh install of Jenkins with no configuration changes&lt;/li&gt;
&lt;li&gt;Start the &lt;a href=&quot;https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project&quot;&gt;Zed Attack Proxy (ZAP)&lt;/a&gt;, no additional configuration required.&lt;/li&gt;
&lt;li&gt;Run the JUnit test &quot;JobManagementTest&quot; in my &lt;a href=&quot;https://github.com/aparkinson/jenkins-webdriver&quot;&gt;GitHub project&lt;/a&gt;. Note: this test uses Chrome&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 
</feed>


